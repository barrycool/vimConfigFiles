###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet inc "#include <>"
#include <$1>
$0
endsnippet

snippet incl "#include ''"
#include "$1"
$0
endsnippet

snippet def "#define ..."
#define $1
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}

#endif /* ifndef $1 */

endsnippet

snippet main "main() (main)"
int main(${1:int argc, char *argv[]})
{
	${VISUAL}$0
	return 0;
}

endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}

endsnippet

snippet if "if (){}"
if (${1:/* condition */}) 
{
	$2
}
$0
endsnippet

snippet ife "if else"
if (${1:/* condition */}) 
{
	$2
}
else
{
	$3
}
${0}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$2
}${0}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
$0
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};

$2
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$4
}

$5
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
$4
endsnippet

# vim:ft=snippets:
